name: ec2-setup
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      

env:
  EC2_NAME: SpaceEngineersServer
  EC2_KEY_NAME: se_server_ec2_key
  ENI_NAME: SpaceEngineersENI
  ROOT_VOLUME_TYPE: gp2
  ROOT_VOLUME_SIZE: 30
  AWS_REGION: eu-central-1
  SUBNET_ID: ${{ secrets.SUBNET_ID }}
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
  
  
jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/ec2-setup
        # env:
        #   TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform/ec2-setup
        # env:
        #   TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -var="ec2_name=${{ env.EC2_NAME }}" -var="region=${{ env.AWS_REGION }}" -var="eni_name=${{ env.ENI_NAME }}" -var="root_volume_type=${{ env.ROOT_VOLUME_TYPE }}" -var="root_volume_size=${{ env.ROOT_VOLUME_SIZE }}" -var="key_name=${{ env.EC2_KEY_NAME }}" -var="subnet_id=${{ secrets.SUBNET_ID }}"
        working-directory: ./terraform/s3-bucket-setup
        # env:
        #   TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        id: terraform
        run: terraform apply -var="ec2_name=${{ env.EC2_NAME }}" -var="region=${{ env.AWS_REGION }}" -var="eni_name=${{ env.ENI_NAME }}" -var="root_volume_type=${{ env.ROOT_VOLUME_TYPE }}" -var="root_volume_size=${{ env.ROOT_VOLUME_SIZE }}" -var="key_name=${{ env.EC2_KEY_NAME }}" -var="subnet_id=${{ secrets.SUBNET_ID }}"
        working-directory: ./terraform/s3-bucket-setup
        # env:
        #   TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform Output
  #       if: ${{ github.event.inputs.action == 'apply' }}
  #       id: terraform-output
  #       run: terraform output -json > terraform-output.json
  #       working-directory: ./terraform/s3-bucket-setup
  #       env:
  #         TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      
  #     - name: Upload Terraform Output
  #       if: ${{ github.event.inputs.action == 'apply' }}
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: terraform-output
  #         path: ./terraform/s3-bucket-setup/terraform-output.json

  # flutter-build-deploy:
  #   needs: terraform
  #   if: ${{ github.event.inputs.action == 'apply' }}
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Download Terraform Output
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: terraform-output

  #     - name: Extract CloudFront Distribution ID
  #       id: extract-id
  #       run: |
  #         export CLOUDFRONT_DISTRIBUTION_ID=$(jq -r '.cloudfront_distribution_id.value' terraform-output.json)
  #         echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID" >> $GITHUB_ENV
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Pull Docker image
  #       run: |
  #         docker pull ${{ secrets.DOCKER_USERNAME }}/flutter-container:latest
  #     - name: Run Docker container
  #       run: |
  #         docker run -d --name flutter-container \
  #           -v ${{ github.workspace }}:/app \
  #           -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
  #           -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
  #           -e AWS_REGION=us-east-1 \
  #           -e S3_BUCKET=${{ env.AWS_BUCKET_NAME }} \
  #           -e CLOUDFRONT_DISTRIBUTION_ID=${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
  #           ${{ secrets.DOCKER_USERNAME }}/flutter-container:latest
  #     - name: Execute Flutter build script
  #       run: |
  #         docker exec flutter-container sh /tmp/build.sh
